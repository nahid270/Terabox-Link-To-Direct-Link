import os
import sys
import threading
import asyncio
import logging
import requests
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from flask import Flask

# --- ‡ßß. ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ---
logging.basicConfig(level=logging.INFO, 
                    format='[%(asctime)s] - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger('TeraboxBot')


# --- ‡ß®. ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ---
# ‡¶è‡¶á ‡¶Æ‡¶æ‡¶®‡¶ó‡ßÅ‡¶≤‡ßã Render Environment Variables ‡¶•‡ßá‡¶ï‡ßá ‡¶≤‡ßã‡¶° ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï‡•§
BOT_TOKEN = os.environ.get("BOT_TOKEN")
API_ID = os.environ.get("API_ID")
API_HASH = os.environ.get("API_HASH")
SESSION_STRING = os.environ.get("SESSION_STRING")
LOG_CHANNEL_ID = os.environ.get("LOG_CHANNEL_ID") # ‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ú‡¶®
PORT = int(os.environ.get("PORT", 8080))

# Terabox API Endpoint
TERABOX_API_URL = "https://terabox-api.vercel.app/api?url="

# ‡¶ï‡ßç‡¶≤‡¶æ‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡ßá‡¶∂‡¶® ‡¶®‡ßá‡¶Æ (‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶¶‡ßà‡¶∞‡ßç‡¶ò‡ßç‡¶Ø ‡¶∏‡ßÄ‡¶Æ‡¶ø‡¶§ ‡¶∞‡¶æ‡¶ñ‡¶§‡ßá ‡¶õ‡ßã‡¶ü ‡¶®‡¶æ‡¶Æ)
CLIENT_NAME = "terabox_bot_session" 


# --- ‡ß©. ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶¨‡ßà‡¶ß‡¶§‡¶æ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ---

if not all([BOT_TOKEN, API_ID, API_HASH]):
    logger.critical("FATAL: BOT_TOKEN, API_ID, and API_HASH must be set in Environment Variables.")
    sys.exit(1)

try:
    API_ID_INT = int(API_ID)
    if LOG_CHANNEL_ID:
        LOG_CHANNEL_ID_INT = int(LOG_CHANNEL_ID)
except ValueError:
    logger.critical("FATAL: API_ID or LOG_CHANNEL_ID must be valid integers.")
    sys.exit(1)


# --- ‡ß™. ‡¶ï‡ßç‡¶≤‡¶æ‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶® ---

app = Flask(__name__)

try:
    if SESSION_STRING:
        # ‡¶ö‡ßÇ‡¶°‡¶º‡¶æ‡¶®‡ßç‡¶§ ‡¶´‡¶ø‡¶ï‡ßç‡¶∏: ‡¶∏‡ßá‡¶∂‡¶® ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶∏‡ßá‡¶ü‡¶ø ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶Æ‡¶ø‡¶ü‡¶æ‡¶∞ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶™‡¶æ‡¶∏ ‡¶ï‡¶∞‡¶æ
        bot = Client(
            CLIENT_NAME, 
            api_id=API_ID_INT,
            api_hash=API_HASH,
            bot_token=BOT_TOKEN,
            session_string=SESSION_STRING
        )
        logger.info("Client initialized successfully using SESSION_STRING.")
    else:
        # ‡¶∏‡ßá‡¶∂‡¶® ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá, Pyrogram ‡¶ï‡ßá ‡¶®‡¶ø‡¶ú‡ßá ‡¶´‡¶æ‡¶á‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡ßÅ‡¶Ø‡ßã‡¶ó ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ
        bot = Client(
            CLIENT_NAME, 
            api_id=API_ID_INT,
            api_hash=API_HASH,
            bot_token=BOT_TOKEN
        )
        logger.warning("Client initialized. No SESSION_STRING found, attempting file creation.")

except Exception as e:
    logger.critical(f"Client initialization failed: {e}")
    sys.exit(1)


# --- ‡ß´. ‡¶≤‡¶ó ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ---

async def log_to_channel(text: str, level: str = 'INFO'):
    """‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶≤‡¶ó ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶Ø‡¶º"""
    if LOG_CHANNEL_ID:
        try:
            await bot.send_message(
                LOG_CHANNEL_ID_INT,
                f"[{level}] {text}",
                disable_notification=True
            )
        except Exception as e:
            logger.error(f"Failed to send log to channel: {e}")


# --- ‡ß¨. ‡¶´‡ßç‡¶≤‡¶æ‡¶∏‡ßç‡¶ï ‡¶∞‡ßÅ‡¶ü ---
@app.route('/')
def home():
    """‡¶π‡ßã‡¶∏‡ßç‡¶ü‡¶ø‡¶Ç ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ü‡¶´‡¶∞‡ßç‡¶Æ‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ö‡ßá‡¶ï"""
    return "‚úÖ Terabox Watch Bot is Running Successfully!"


# --- ‡ß≠. API ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ---

async def get_terabox_link(link: str):
    """Terabox API ‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßá ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá‡•§"""
    api_url = f"{TERABOX_API_URL}{link}"
    
    try:
        res = requests.get(api_url, timeout=15).json()

        if res.get("success") and res.get("downloadLink"):
            return res["downloadLink"]
        else:
            return None
            
    except requests.exceptions.RequestException:
        return "NETWORK_ERROR"
    except Exception as e:
        logger.error(f"Unknown error during API call: {e}")
        return "UNKNOWN_ERROR"


# --- ‡ßÆ. Pyrogram ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞‡ßç‡¶∏ ---

@bot.on_message(filters.command("start"))
async def start_handler(_, msg):
    """/start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡ßá‡¶Ø‡¶º"""
    user_info = f"User: {msg.from_user.id} ({msg.from_user.first_name})"
    logger.info(f"Received /start from {user_info}")
    
    await log_to_channel(f"Received /start command.\n{user_info}", level='EVENT')
    
    await msg.reply_text(
        "üëã **‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! ‡¶Ü‡¶Æ‡¶ø Terabox Watch Bot!**\n\n"
        "‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶è‡¶ï‡¶ü‡¶æ **‡¶¨‡ßà‡¶ß Terabox ‡¶≤‡¶ø‡¶Ç‡¶ï** ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§\n"
        "‡¶Ü‡¶Æ‡¶ø ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶¶‡ßá‡¶ñ‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶¨ üî•\n\n"
        "‡¶è‡¶ñ‡¶®‡¶á ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®!",
        disable_web_page_preview=True
    )

@bot.on_message(filters.text & ~filters.command("start"))
async def get_video_handler(_, msg):
    link = msg.text.strip()
    user_info = f"User: {msg.from_user.id} ({msg.from_user.first_name})"
    
    await log_to_channel(f"Received link: `{link}`\n{user_info}", level='REQUEST')
    
    if "terabox" not in link.lower():
        return await msg.reply_text("‚ùå ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßà‡¶ß Terabox ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¶‡¶ø‡¶®‡•§")

    waiting_msg = await msg.reply_text("‚è≥ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá... ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
    
    video_url = await get_terabox_link(link)
    reply_markup = None
    
    # ‡¶è‡¶∞‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶ø‡¶Ç
    if video_url == "NETWORK_ERROR":
        text = "‚ö†Ô∏è API ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ ‡¶¨‡¶æ ‡¶è‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶Æ‡¶§ ‡¶∏‡¶æ‡¶°‡¶º‡¶æ ‡¶¶‡¶ø‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ‡•§ ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ï‡ßç‡¶∑‡¶£ ‡¶™‡¶∞ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
        await log_to_channel(f"Network Error during API call for {user_info}", level='ERROR')
    elif video_url == "UNKNOWN_ERROR":
        text = "‚ùå ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶∂‡¶ø‡¶§ ‡¶≠‡ßÅ‡¶≤ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶≤‡¶ó ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
        await log_to_channel(f"Unknown Error for {user_info}", level='ERROR')
    elif video_url:
        # ‡¶∏‡¶´‡¶≤ ‡¶π‡¶≤‡ßá
        text = "‚úÖ **‡¶∏‡¶´‡¶≤!** ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶∞‡ßá‡¶°‡¶ø! ‡¶è‡¶ñ‡¶®‡¶á ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã üëá"
        reply_markup = InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ñ∂Ô∏è Watch Now", url=video_url)]]
        )
        await log_to_channel(f"Successfully extracted URL for {user_info}.", level='SUCCESS')
    else:
        # API ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¶‡¶ø‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶≤‡ßá
        text = "‚ö†Ô∏è ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá ‡¶¨‡¶æ ‡¶≤‡¶ø‡¶Ç‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶¨‡ßà‡¶ß/‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§"
        await log_to_channel(f"Extraction failed for {user_info}: {link}", level='WARNING')
    
    # ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶è‡¶°‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ
    await waiting_msg.edit_text(text, reply_markup=reply_markup)


# --- ‡ßØ. ‡¶Æ‡¶æ‡¶≤‡ßç‡¶ü‡¶ø‡¶•‡ßç‡¶∞‡ßá‡¶°‡¶ø‡¶Ç ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü‡¶Ü‡¶™ ‡¶≤‡¶ú‡¶ø‡¶ï ---

if __name__ == "__main__":
    
    def start_pyrogram_thread():
        """Pyrogram ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá, ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßÅ‡¶Ø‡¶º‡¶æ‡¶≤ asyncio ‡¶≤‡ßÅ‡¶™‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã‡•§"""
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        async def run_pyrogram():
            try:
                await bot.start()
                logger.info("‚úÖ [STATUS] Pyrogram bot online and ready to handle updates.")
                
                # ‡¶¨‡¶ü ‡¶Ö‡¶®‡¶≤‡¶æ‡¶á‡¶®‡ßá ‡¶Ü‡¶∏‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶æ‡¶•‡ßá‡¶á ‡¶≤‡¶ó ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶ì
                if LOG_CHANNEL_ID:
                    await bot.send_message(
                        LOG_CHANNEL_ID_INT,
                        f"üü¢ **BOT ONLINE!** Successfully connected and ready to process links.",
                        disable_notification=False
                    )
                
                # ‡¶¨‡¶ü‡¶ï‡ßá ‡¶Ö‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü‡¶ï‡¶æ‡¶≤ ‡¶ß‡¶∞‡ßá ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶∞‡¶æ‡¶ñ‡¶æ
                await asyncio.Future() 
                
            except Exception as e:
                logger.error(f"‚ùå [FATAL THREAD ERROR] Pyrogram failure: {e}")
            finally:
                if bot.is_connected:
                    await bot.stop()
                    logger.info("üõë [STATUS] Pyrogram bot stopped.")
                
        loop.run_until_complete(run_pyrogram())
        
    # ‡¶¨‡¶ü‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã
    threading.Thread(target=start_pyrogram_thread, name='PyrogramThread').start()
    
    # ‡¶´‡ßç‡¶≤‡¶æ‡¶∏‡ßç‡¶ï ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶ï‡ßá ‡¶Æ‡ßÇ‡¶≤ ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ
    logger.info("üöÄ [STATUS] Flask web server starting...")
    app.run(host="0.0.0.0", port=PORT)
