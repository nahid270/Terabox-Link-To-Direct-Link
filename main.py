from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from flask import Flask
import threading
import requests
import asyncio # ржпржжрж┐ржУ requests ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ, threading ржПрж░ рж╕рж╛ржерзЗ asynchronous operations ржЪрж╛рж▓рж╛ржирзЛрж░ ржЬржирзНржп ржкрзНрж░рж╕рзНрждрзБржд рж░рж╛ржЦрж╛ ржнрж╛рж▓рзЛред

# тЖУтЖУтЖУ ржПржЦрж╛ржирзЗ рждрзЛржорж╛рж░ ржмржЯ ржЯрзЛржХрзЗржи ржмрж╕рж╛ржУ тЖУтЖУтЖУ
BOT_TOKEN = "7991711310:AAHIZbDdINXt9haVibV-sBLsq2N4S-hyxDQ" 

# --- Pyrogram ржПржмржВ Flask рж╕рзЗржЯржЖржк ---
app = Flask(__name__)
# Client рж╕рзЗрж╢ржи ржирзЗржо: terabox_downloader_bot
bot = Client("terabox_downloader_bot", bot_token=BOT_TOKEN)

# --- рзз. ржлрзНрж▓рж╛рж╕рзНржХ рж░рзБржЯ (Health Check) ---
@app.route('/')
def home():
    """ржЪрзЗржХ ржХрж░рзЗ рж╕рж╛рж░рзНржнрж╛рж░ ржЪрж▓ржЫрзЗ ржХрж┐ ржирж╛"""
    return "тЬЕ Terabox Watch Bot is Running Successfully!"

# --- рзи. Pyrogram рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░рзНрж╕ ---

@bot.on_message(filters.command("start"))
async def start_handler(_, msg):
    """/start ржХржорж╛ржирзНржбрзЗрж░ ржЙрждрзНрждрж░ ржжрзЗржпрж╝"""
    await msg.reply_text(
        "ЁЯСЛ **рж╕рзНржмрж╛ржЧрждржо! ржЖржорж┐ Terabox Watch Bot!**\n\n"
        "ржЖржорж╛рж░ ржХрж╛ржЬ ржЦрзБржмржЗ рж╕рзЛржЬрж╛:\n"
        "тЮбя╕П рж╢рзБржзрзБ ржЖржорж╛ржХрзЗ ржПржХржЯрж┐ **ржмрзИржз Terabox рж▓рж┐ржВржХ** ржкрж╛ржарж╛ржиред\n"
        "ржЖржорж┐ рж╕рж╛ржерзЗ рж╕рж╛ржерзЗ ржЖржкржирж╛ржХрзЗ рж╕рж░рж╛рж╕рж░рж┐ ржнрж┐ржбрж┐ржУ ржжрзЗржЦрж╛рж░ рж▓рж┐ржВржХ рждрзИрж░рж┐ ржХрж░рзЗ ржжрзЗржм ЁЯФе\n\n"
        "ржПржЦржиржЗ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи!",
        disable_web_page_preview=True
    )

@bot.on_message(filters.text & ~filters.command("start"))
async def get_video_handler(_, msg):
    link = msg.text.strip()
    
    # ржЗржиржкрзБржЯ ржпрж╛ржЪрж╛ржЗ
    if "terabox" not in link.lower():
        return await msg.reply_text("тЭМ ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрж┐ ржмрзИржз Terabox рж▓рж┐ржВржХ ржжрж┐ржиред")

    # ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржХрзЗ ржЕржкрзЗржХрзНрж╖рж╛рж░ ржмрж╛рж░рзНрждрж╛ ржкрж╛ржарж╛ржирзЛ
    waiting_msg = await msg.reply_text("тП│ ржЖржкржирж╛рж░ рж▓рж┐ржВржХ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ... ржжржпрж╝рж╛ ржХрж░рзЗ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржиред")
    
    try:
        # API ржПрж░ ржорж╛ржзрзНржпржорзЗ рж▓рж┐ржВржХ ржерзЗржХрзЗ ржнрж┐ржбрж┐ржУ ржмрзЗрж░ ржХрж░рж╛
        api_url = f"https://terabox-api.vercel.app/api?url={link}"
        
        # requests synchronous рж╣ржУрзЯрж╛рзЯ, ржПржЯрж┐ ржПржЗ ржерзНрж░рзЗржбржЯрж┐ржХрзЗ ржмрзНрж▓ржХ ржХрж░ржмрзЗ, 
        # ржХрж┐ржирзНрждрзБ ржпрзЗрж╣рзЗрждрзБ Pyrogram ржЕржирзНржп ржерзНрж░рзЗржбрзЗ ржЪрж▓ржЫрзЗ, рждрж╛ржЗ ржорзВрж▓ ржЕрзНржпрж╛ржк рж╣рзНржпрж╛ржВ рж╣ржмрзЗ ржирж╛ред
        res = requests.get(api_url, timeout=15).json()

        if res.get("success") and res.get("downloadLink"):
            video_url = res["downloadLink"]
            
            # рж╕ржлрж▓ рж╣рж▓рзЗ ржорзЗрж╕рзЗржЬ ржПржбрж┐ржЯ ржХрж░рж╛
            await waiting_msg.edit_text(
                "тЬЕ **рж╕ржлрж▓!** ржнрж┐ржбрж┐ржУ рж░рзЗржбрж┐! ржПржЦржиржЗ ржжрзЗржЦрждрзЗ ржкрж╛рж░рзЛ ЁЯСЗ",
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("тЦ╢я╕П Watch Now", url=video_url)]]
                )
            )
        else:
            # API рж▓рж┐ржВржХ ржжрж┐рждрзЗ ржмрзНржпрж░рзНрже рж╣рж▓рзЗ
            await waiting_msg.edit_text(
                "тЪая╕П ржнрж┐ржбрж┐ржУ ржмрзЗрж░ ржХрж░рж╛ ржпрж╛ржпрж╝ржирж┐ред рж╕рж╛рж░рзНржнрж╛рж░рзЗрж░ рж╕ржорж╕рзНржпрж╛ рж╣рждрзЗ ржкрж╛рж░рзЗ ржмрж╛ рж▓рж┐ржВржХржЯрж┐ ржЕржмрзИржз/ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред"
            )
            
    except requests.exceptions.RequestException:
        # ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ ржмрж╛ API ржЯрж╛ржЗржоржЖржЙржЯ рж╕ржВржХрзНрж░рж╛ржирзНржд ржПрж░рж░
        await waiting_msg.edit_text(
            "тЪая╕П API ржПрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рж╛ ржпрж╛ржЪрзНржЫрзЗ ржирж╛ред ржХрж┐ржЫрзБржХрзНрж╖ржг ржкрж░ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред"
        )
    except Exception as e:
        # ржЕржирзНржп ржХрзЛржирзЛ ржЕржкрзНрж░рждрзНржпрж╛рж╢рж┐ржд ржПрж░рж░
        await waiting_msg.edit_text(
            f"тЭМ ржПржХржЯрж┐ ржЕржкрзНрж░рждрзНржпрж╛рж╢рж┐ржд ржнрзБрж▓ рж╣ржпрж╝рзЗржЫрзЗ:\n`{type(e).__name__}: {e}`"
        )

# --- рзй. ржкрзНрж░рзЛржЧрзНрж░рж╛ржо рж╢рзБрж░рзБ ржХрж░рж╛ (Flask ржПржмржВ Pyrogram ржПржХрж╕рж╛ржерзЗ) ---

if __name__ == "__main__":
    # Pyrogram ржмржЯржХрзЗ ржПржХржЯрж┐ ржмрзНржпрж╛ржХржЧрзНрж░рж╛ржЙржирзНржб ржерзНрж░рзЗржбрзЗ рж╢рзБрж░рзБ ржХрж░рж╛
    # ржПржЯрж┐ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзЗ ржпрзЗ ржмржЯ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржЖржкржбрзЗржЯ рж╢рзБржирждрзЗ ржерж╛ржХржмрзЗред
    threading.Thread(target=lambda: bot.run()).start()
    
    # ржлрзНрж▓рж╛рж╕рзНржХ ржЕрзНржпрж╛ржкржХрзЗ ржорзВрж▓ ржерзНрж░рзЗржбрзЗ рж╢рзБрж░рзБ ржХрж░рж╛ (рж╣рзЛрж╕рзНржЯрж┐ржВ ржкрзНрж▓рзНржпрж╛ржЯржлрж░рзНржорзЗрж░ ржЬржирзНржп ржЖржмрж╢рзНржпржХ)
    print("ЁЯЪА Flask web server started on port 8080.")
    app.run(host="0.0.0.0", port=8080)
