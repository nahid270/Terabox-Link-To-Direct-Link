from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from flask import Flask
import threading
import requests
import asyncio
import os 

# --- ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ (‡¶è‡¶®‡¶≠‡¶æ‡¶Ø‡¶º‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶¨‡¶æ ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶•‡ßá‡¶ï‡ßá) ---
# NOTE: ‡¶∏‡¶ø‡¶ï‡¶ø‡¶â‡¶∞‡¶ø‡¶ü‡¶ø‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø Render ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏‡ßá ‡¶è‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
BOT_TOKEN = os.environ.get("BOT_TOKEN", "7991711310:AAHIZbDdINXt9haVibV-sBLsq2N4S-hyxDQ")
API_ID = int(os.environ.get("API_ID", 28870226))
API_HASH = os.environ.get("API_HASH", "a5b1ff3f75941649bf5bc159782f0f00") 


# --- Pyrogram ‡¶è‡¶¨‡¶Ç Flask ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ---
app = Flask(__name__)

bot = Client(
    "terabox_downloader_bot", 
    api_id=API_ID,
    api_hash=API_HASH,
    bot_token=BOT_TOKEN
)

# --- ‡ßß. ‡¶´‡ßç‡¶≤‡¶æ‡¶∏‡ßç‡¶ï ‡¶∞‡ßÅ‡¶ü (Health Check) ---
@app.route('/')
def home():
    """‡¶π‡ßã‡¶∏‡ßç‡¶ü‡¶ø‡¶Ç ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ü‡¶´‡¶∞‡ßç‡¶Æ‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ö‡ßá‡¶ï"""
    return "‚úÖ Terabox Watch Bot is Running Successfully!"

# --- ‡ß®. Pyrogram ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞‡ßç‡¶∏ ---

@bot.on_message(filters.command("start"))
async def start_handler(_, msg):
    """/start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡ßá‡¶Ø‡¶º"""
    await msg.reply_text(
        "üëã **‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! ‡¶Ü‡¶Æ‡¶ø Terabox Watch Bot!**\n\n"
        "‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶ñ‡ßÅ‡¶¨‡¶á ‡¶∏‡ßã‡¶ú‡¶æ:\n"
        "‚û°Ô∏è ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø **‡¶¨‡ßà‡¶ß Terabox ‡¶≤‡¶ø‡¶Ç‡¶ï** ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§\n"
        "‡¶Ü‡¶Æ‡¶ø ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶¶‡ßá‡¶ñ‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶¨ üî•\n\n"
        "‡¶è‡¶ñ‡¶®‡¶á ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®!",
        disable_web_page_preview=True
    )

@bot.on_message(filters.text & ~filters.command("start"))
async def get_video_handler(_, msg):
    link = msg.text.strip()
    
    if "terabox" not in link.lower():
        return await msg.reply_text("‚ùå ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßà‡¶ß Terabox ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¶‡¶ø‡¶®‡•§")

    waiting_msg = await msg.reply_text("‚è≥ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá... ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
    
    try:
        api_url = f"https://terabox-api.vercel.app/api?url={link}"
        
        # Note: requests synchronous, but fine since it's in a Pyrogram thread.
        res = requests.get(api_url, timeout=15).json()

        if res.get("success") and res.get("downloadLink"):
            video_url = res["downloadLink"]
            
            await waiting_msg.edit_text(
                "‚úÖ **‡¶∏‡¶´‡¶≤!** ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶∞‡ßá‡¶°‡¶ø! ‡¶è‡¶ñ‡¶®‡¶á ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã üëá",
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("‚ñ∂Ô∏è Watch Now", url=video_url)]]
                )
            )
        else:
            await waiting_msg.edit_text(
                "‚ö†Ô∏è ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá ‡¶¨‡¶æ ‡¶≤‡¶ø‡¶Ç‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶¨‡ßà‡¶ß/‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§"
            )
            
    except requests.exceptions.RequestException:
        await waiting_msg.edit_text(
            "‚ö†Ô∏è API ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ ‡¶¨‡¶æ ‡¶è‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶Æ‡¶§ ‡¶∏‡¶æ‡¶°‡¶º‡¶æ ‡¶¶‡¶ø‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ‡•§ ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ï‡ßç‡¶∑‡¶£ ‡¶™‡¶∞ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
        )
    except Exception as e:
        await waiting_msg.edit_text(
            f"‚ùå ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶∂‡¶ø‡¶§ ‡¶≠‡ßÅ‡¶≤ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá:\n`{type(e).__name__}: {e}`"
        )

# --- ‡ß©. ‡¶™‡ßç‡¶∞‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ (‡¶ö‡ßÇ‡¶°‡¶º‡¶æ‡¶®‡ßç‡¶§ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø‡¶Æ‡ßÅ‡¶ï‡ßç‡¶§ ‡¶≤‡¶ú‡¶ø‡¶ï) ---

if __name__ == "__main__":
    
    def start_bot():
        """Pyrogram ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá, ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßÅ‡¶Ø‡¶º‡¶æ‡¶≤ asyncio ‡¶≤‡ßÅ‡¶™‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã‡•§"""
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        async def run_pyrogram():
            try:
                # ‡¶¨‡¶ü ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ (‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡ßç‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶Ö‡¶•‡ßã‡¶∞‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡¶æ)
                await bot.start()
                print("ü§ñ Pyrogram bot connected successfully.")
                
                # ‡¶¨‡¶ü‡¶ï‡ßá ‡¶Ö‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü‡¶ï‡¶æ‡¶≤ ‡¶ß‡¶∞‡ßá ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶∞‡¶æ‡¶ñ‡¶æ
                # signal.error ‡¶è‡¶°‡¶º‡¶æ‡¶§‡ßá idle() ‡¶è‡¶∞ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡ßá Future() ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
                await asyncio.Future() 
                
            except Exception as e:
                # ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã fatal error ‡¶π‡¶Ø‡¶º
                print(f"Pyrogram connection error: {e}")
            finally:
                # ‡¶∏‡¶¨ ‡¶∂‡ßá‡¶∑‡ßá ‡¶¨‡¶ü ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ
                await bot.stop()
                print("ü§ñ Pyrogram bot stopped.")

        print("ü§ñ Pyrogram bot setup complete. Starting loop...")
        loop.run_until_complete(run_pyrogram())
        
    # ‡¶¨‡¶ü‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã
    threading.Thread(target=start_bot, name='PyrogramThread').start()
    
    # ‡¶´‡ßç‡¶≤‡¶æ‡¶∏‡ßç‡¶ï ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶ï‡ßá ‡¶Æ‡ßÇ‡¶≤ ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ
    print("üöÄ Flask web server started on port 8080.")
    app.run(host="0.0.0.0", port=8080)
